const gulp = require('gulp');
const sass = require('gulp-sass');
const haml = require('gulp-ruby-haml');
const gulpIgnore = require('gulp-ignore');
const browserSync = require('browser-sync').create();
const zip = require('gulp-zip');

/* ---- Project - Config paths ----*/

//name theme - app
var name_theme = 'listashop';

//directory root  src & dist
var dir_src = 'src';
var dir_dist = 'dist';
var dir_output = 'output';



//set of paths - sources
var src_paths = {
  haml: [`${dir_src}/*.haml`, `${dir_src}/partials/*.haml`],
  css: `${dir_src}/css/**/*`,
  js: `${dir_src}/js/**/*`,
  sass: `${dir_src}/scss/**/*.scss`,
  fonts: `${dir_src}/fonts/**/*`,
  images: `${dir_src}/img/**/*`,
  scripts: `${dir_src}/scripts/**/*`,
  components: `${dir_src}/components/**/*`,
  covers: `${dir_src}/covers/**/*`
}

//set of paths - theme
var theme_paths = {
  assets: `${dir_output}/${name_theme}/assets/themes/${name_theme}`,
  components: `${dir_output}/${name_theme}/components`,
  covers: `${dir_output}/${name_theme}/covers`,
  layouts: `${dir_output}/${name_theme}/layouts`,
  views: `${dir_output}/${name_theme}/views`,
  zip: `${dir_output}/${name_theme}/*`,
  zip_generated: `${dir_output}/`,
}

//excludes the partials generated by haml
var partial_condition = '_*.html';

/* ---- Project - Task ----*/

gulp.task('browser', function () {
  browserSync.init({
    server: {
      baseDir: dir_dist
    }
  })
});

/*New task*/
gulp.task('assets', function () {
  return gulp.src([
    src_paths.css,
    src_paths.js,
    src_paths.images,
    src_paths.fonts,
  ])
    .pipe(gulp.dest(theme_paths.assets))
});

gulp.task('components', function () {
  return gulp.src(src_paths.components)
    .pipe(gulp.dest(theme_paths.components))
});

gulp.task('covers', function () {
  return gulp.src(src_paths.covers)
    .pipe(gulp.dest(theme_paths.covers))
});

gulp.task('layouts', function () {
  return gulp.src(src_paths.css)
    .pipe(gulp.dest(theme_paths.layouts))
});

gulp.task('views', function () {
  return gulp.src(src_paths.haml)
    .pipe(haml({
      doubleQuote: true
    }))
    .pipe(gulpIgnore.exclude(partial_condition))
    .pipe(gulp.dest(theme_paths.views))
    .pipe(browserSync.reload({
      stream: true
    }))
});

gulp.task('compressed', function () {
  return gulp.src(theme_paths.zip)
    .pipe(zip(`${name_theme}.zip`))
    .pipe(gulp.dest(theme_paths.zip_generated));
})

gulp.task('theme', ['assets', 'components', 'covers', 'layouts', 'views', 'compressed'], function () {
  console.log(`template ${name_theme} has been created`)
  console.log(`file compression has been created ${name_theme}.zip`)
});

/* new task*/



gulp.task('haml', function () {
  return gulp.src(src_paths.haml)
    .pipe(haml({
      doubleQuote: true
    }))
    .pipe(gulpIgnore.exclude(partial_condition))
    .pipe(gulp.dest(dir_dist))
    .pipe(browserSync.reload({
      stream: true
    }))
});

gulp.task('css', function () {
  return gulp.src(src_paths.css)
    .pipe(gulp.dest(dist_paths.css))
});

gulp.task('js', function () {
  return gulp.src(src_paths.js)
    .pipe(gulp.dest(dist_paths.js))
});

gulp.task('sass', function () {
  return gulp.src(src_paths.sass)
    .pipe(sass().on('error', sass.logError))
    .pipe(gulp.dest(dist_paths.css));
});

gulp.task('fonts', function () {
  return gulp.src(src_paths.fonts)
    .pipe(gulp.dest(dist_paths.fonts))
});

gulp.task('images', function () {
  return gulp.src(src_paths.images)
    .pipe(gulp.dest(dist_paths.img))
});

gulp.task('scripts', function () {
  return gulp.src(src_paths.scripts)
    .pipe(gulp.dest(dist_paths.js))
});

gulp.task('watch', ['haml', 'css', 'js', 'sass', 'fonts', 'images', 'scripts'], function () {
  gulp.watch(src_paths.haml, ['haml']).on('change', browserSync.reload);
  gulp.watch(src_paths.sass, ['sass']).on('change', browserSync.reload);
  gulp.watch(src_paths.scripts, ['scripts']).on('change', browserSync.reload);
  gulp.watch(src_paths.images, ['images']).on('change', browserSync.reload);

});

gulp.task('default', ['watch', 'browser']);