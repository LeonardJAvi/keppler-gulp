const gulp = require("gulp");
const sass = require("gulp-sass");
const haml = require("gulp-ruby-haml");
const gulpIgnore = require("gulp-ignore");
const browserSync = require("browser-sync").create();
const zip = require("gulp-zip");
const inject = require("gulp-inject");
const htmlbeautify = require("gulp-html-beautify");

/* ---- Project - Config paths ----*/
const name_theme = "listashop";
const dir_src = "src";
const dir_dist = "dist";
const dir_output = "output";
const files_css = `./${dir_src}/css/**/*.css`;
const files_js = `./${dir_src}/js/**/*.js`;

//set of route objects - start
var src_paths = {
  haml: [`${dir_src}/*.haml`, `${dir_src}/partials/*.haml`],
  css: `${dir_src}/css/**/*`,
  js: `${dir_src}/js/**/*`,
  sass: `${dir_src}/scss/**/*.scss`,
  fonts: `${dir_src}/fonts/**/*`,
  images: `${dir_src}/img/**/*`,
  scripts: `${dir_src}/scripts/**/*`,
  components: `${dir_src}/components/**/*`,
  layouts: `${dir_src}/layouts/**/*`,
  covers: `${dir_src}/covers/**/*`
};

//set of paths - distribution
var dist_paths = {
  css: `${dir_dist}/assets/css`,
  js: `${dir_dist}/assets/js`,
  img: `${dir_dist}/assets/img`,
  fonts: `${dir_dist}/assets/fonts`
};

//set of paths - output (theme)
var output_paths = {
  assets: `${dir_output}/${name_theme}/assets/themes/${name_theme}`,
  components: `${dir_output}/${name_theme}/components`,
  covers: `${dir_output}/${name_theme}/covers`,
  layouts: `${dir_output}/${name_theme}/layouts`,
  views: `${dir_output}/${name_theme}/views`,
  zip: `${dir_output}/${name_theme}/*`,
  zip_generated: `${dir_output}/`
};

//set of route objects - end

//excludes the partials generated by haml
var partial_condition = "_*.html";

/* ---- Project - Task ----*/

gulp.task("browser", function() {
  browserSync.init({
    server: {
      baseDir: dir_dist
    }
  });
});

gulp.task("haml", function() {
  let distSources = gulp.src([files_css, files_js], { read: false });
  let distOptions = {
    relative: true,
    addRootSlash: false,
    addPrefix: `assets`
  };
  return gulp
    .src(src_paths.haml)
    .pipe(inject(distSources, distOptions))
    .pipe(
      haml({
        doubleQuote: true
      })
    )
    .pipe(
      htmlbeautify({
        indent_size: 2
      })
    )
    .pipe(gulpIgnore.exclude(partial_condition))
    .pipe(gulp.dest(dir_dist))
    .pipe(
      browserSync.reload({
        stream: true
      })
    );
});

gulp.task("css", function() {
  return gulp.src(src_paths.css).pipe(gulp.dest(dist_paths.css));
});

gulp.task("js", function() {
  return gulp.src(src_paths.js).pipe(gulp.dest(dist_paths.js));
});

gulp.task("sass", function() {
  return gulp
    .src(src_paths.sass)
    .pipe(sass().on("error", sass.logError))
    .pipe(gulp.dest(`${dir_src}/css/`))
    .pipe(gulp.dest(dist_paths.css));
});

gulp.task("fonts", function() {
  return gulp.src(src_paths.fonts).pipe(gulp.dest(dist_paths.fonts));
});

gulp.task("images", function() {
  return gulp.src(src_paths.images).pipe(gulp.dest(dist_paths.img));
});

/*New task*/
gulp.task("assets", function() {
  return gulp
    .src([src_paths.css, src_paths.js, src_paths.images, src_paths.fonts])
    .pipe(gulp.dest(output_paths.assets));
});

gulp.task("components", function() {
  return gulp
    .src(src_paths.components)
    .pipe(gulp.dest(output_paths.components));
});

gulp.task("covers", function() {
  return gulp.src(src_paths.covers).pipe(gulp.dest(output_paths.covers));
});

gulp.task("layouts", function() {
  return gulp.src(src_paths.layouts).pipe(gulp.dest(output_paths.layouts));
});

gulp.task("views", function() {
  let outputSources = gulp.src([files_css, files_js], { read: false });
  let outputOptions = {
    relative: true,
    addRootSlash: false,
    addPrefix: `assets/themes/${name_theme}`
  };
  return gulp
    .src(src_paths.haml)
    .pipe(inject(outputSources, outputOptions))
    .pipe(
      haml({
        doubleQuote: true
      })
    )
    .pipe(
      htmlbeautify({
        indent_size: 2
      })
    )
    .pipe(gulpIgnore.exclude(partial_condition))
    .pipe(gulp.dest(output_paths.views))
    .pipe(
      browserSync.reload({
        stream: true
      })
    );
});

gulp.task("compressed", function() {
  return gulp
    .src(output_paths.zip)
    .pipe(zip(`${name_theme}.zip`))
    .pipe(gulp.dest(output_paths.zip_generated));
});

gulp.task(
  "theme",
  ["assets", "components", "covers", "layouts", "views", "compressed"],
  function() {
    console.log(`template ${name_theme} has been created`);
  }
);

gulp.task(
  "watch",
  ["haml", "css", "js", "sass", "fonts", "images"],
  function() {
    gulp.watch(src_paths.haml, ["haml"]).on("change", browserSync.reload);
    gulp.watch(src_paths.sass, ["sass"]).on("change", browserSync.reload);
    gulp.watch(src_paths.scripts, ["scripts"]).on("change", browserSync.reload);
    gulp.watch(src_paths.images, ["images"]).on("change", browserSync.reload);
  }
);

gulp.task("default", ["watch", "browser", "theme"]);
